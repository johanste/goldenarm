{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Name of Virtual Machine"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS1_V2",
      "metadata": {
        "description": "Size of Virtual Machine"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "osType": {
      "type": "string",
      "allowedValues": [
        "linux",
        "windows"
      ],
      "defaultValue": "linux"
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": ""
    },
    "sshKeyPath": {
      "type": "string",
      "defaultValue": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
    },
    "availabilitySet": {
      "type": "string",
      "defaultValue": ""
    },
    "customData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum length of the binary array is 65535 bytes. "
      }
    },
    "imageReference": {
      "type": "object",
      "defaultValue": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "16.04.0-LTS",
        "version": "latest"
      }
    },
    "osDiskCreateOption": {
      "type": "string",
      "defaultValue": "FromImage",
      "allowedValues": [
        "Attach",
        "FromImage"
      ],
      "metadata": {
        "description": "Image reference including id, publisher, offer, sku, version"
      }
    },
    "licenseType": {
      "type": "string",
      "allowedValues": [
        "Windows_Client",
        "Windows_Server",
        ""
      ],
      "defaultValue": ""
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "nicIds": {
      "type": "array",
      "defaultValue": [ ]
    },
    "tags": {
      "type": "object",
      "defaultValue": {}
    },

    "unmanagedDiskStorageAccount": {
      "type": "object",
      "defaultValue": {
        "name": "dummy",
        "resourceGroup": null,
        "type": null,
        "newOrExisting": "ignore"
      },
      "metadata": {
        "description": "If specified, use unmanaged disks. The value corresponds to the output from https://docs.microsoft.com/en-us/azure/azure-resource-manager/managed-application-microsoft-storage-storageaccountselector",
        "example": {
          "name": "storageaccount01",
          "resourceGroup": "rg01",
          "type": "Premium_LRS",
          "newOrExisting": "new"
        }
      }
    },

    "nic": {
      "type": "object",
      "defaultValue": {
        "name": "dummy",
        "newOrExisting": "ignore"
      },
      "metadata": {
        "description": "Nic create options. If provided, and the newOrExisting property is set to 'new', we will create the corresponding NIC",
        "example": {
          "name": "myLittleNic",
          "resourceGroup": "rg01",
          "newOrExisting": "new"
        }
      }
    },
    "privateIpAllocationMethod": {
      "type": "string",
      "defaultValue": "dynamic",
      "allowedValues": [
        "dynamic",
        "static"
      ]
    },
    "subnet": {
      "type": "object",
      "defaultValue": {
        "name": "dummy",
        "newOrExisting": "ignore"
      },
      "metadata": {
        "description": "Optional value corresponding to the schema of the output for https://docs.microsoft.com/en-us/azure/azure-resource-manager/managed-application-microsoft-network-virtualnetworkcombo. If specified, and newOrExisting is set to 'new', a new VNET (with subnets) and NIC will be created",
        "example": {
          "name": "vnet01",
          "resourceGroup": "rg01",
          "addressPrefixes": [ "10.0.0.0/16" ],
          "newOrExisting": "new",
          "subnets": {
            "subnet": {
              "name": "subnet",
              "addressPrefix": "10.0.0.0/24",
              "startAddress": "10.0.0.1"
            }
          }
        }
      }
    }
  },
  "variables": {

    "availabilitySetFragmentMapKey": "[string(greater(length(parameters('availabilitySet')), 0))]",
    "availabilitySetFragmentMap": {
      "true": {
        "availabilitySet": {
          "id": "[parameters('availabilitySet')]"
        }
      },
      "false": {}
    },
    "availabilitySetFragment": "[variables('availabilitySetFragmentMap')[variables('availabilitySetFragmentMapKey')]]",


    "licenseTypeFragmentMapKey": "[string(greater(length(parameters('licenseType')), 0))]",
    "licenseTypeFragmentMap": {
      "true": {
        "licenseType": "[parameters('licenseType')]"
      },
      "false": {}
    },
    "licenseTypeFragment": "[variables('licenseTypeFragmentMap')[variables('licenseTypeFragmentMapKey')]]",

    "imageReferenceFragment": {
      "storageProfile": {
        "imageReference": "[parameters('imageReference')]",
        "osDisk": {
          "createOption": "[parameters('osDiskCreateOption')]"
        },
        "dataDisks": [
          {
            "diskSizeGB": "1023",
            "lun": 0,
            "createOption": "Empty"
          }
        ]
      }
    },

    "shouldCreateStorageAccount": "[equals(parameters('unmanagedDiskStorageAccount').newOrExisting, 'new')]",

    "osProfileAdminPasswordFragmentMapKey": "[string(greater(length(parameters('adminPassword')), 0))]",
    "osProfileAdminPasswordFragmentMap": {
      "true": {
        "adminPassword": "[parameters('adminPassword')]"
      },
      "false": {}
    },
    "osProfileAdminPasswordFragment": "[variables('osProfileAdminPasswordFragmentMap')[variables('osProfileAdminPasswordFragmentMapKey')]]",

    "osProfileCustomDataFragmentMapKey": "[string(greater(length(parameters('customData')), 0))]",
    "osProfileCustomDataFragmentMap": {
      "true": {
        "customData": "[parameters('customData')]"
      },
      "false": {}
    },
    "osProfileCustomDataFragment": "[variables('osProfileCustomDataFragmentMap')[variables('osProfileCustomDataFragmentMapKey')]]",

    "osProfileBaseProperties": {
      "computerName": "[parameters('name')]",
      "adminUsername": "[parameters('adminUsername')]"
    },

    "linuxPlatformConfigurationSshMap": {
      "true": {
        "publicKeys": [
          {
            "path": "[parameters('sshKeyPath')]",
            "keyData": "[parameters('sshPublicKey')]"
          }
        ]
      },
      "false": {
        "publicKeys": []
      }
    },

    "osProfilePlatformConfigurationsFragmentMap": {
      "linux": {
        "linuxConfiguration": {
          "disablePasswordAuthentication": "[empty(parameters('adminPassword'))]",
          "ssh": "[variables('linuxPlatformConfigurationSshMap')[string(greater(length(parameters('sshPublicKey')), 0))]]"
        }
      },
      "windows": {
      }
    },
    "osProfilePlatformConfigurationFragment": "[variables('osProfilePlatformConfigurationsFragmentMap')[parameters('osType')]]",

    "osProfileProperties": "[union(variables('osProfileBaseProperties'), variables('osProfileAdminPasswordFragment'), variables('osProfilePlatformConfigurationFragment'), variables('osProfileCustomDataFragment'))]",

    "dummyObject": [ null ],
    "nicCount": "[length(parameters('nicIds'))]",
    "nicParamsPlusOne": "[concat(parameters('nicIds'), variables('dummyObject'))]",
    "nicReferenceArray": [
      {
        "id": "[variables('nicParamsPlusOne')[min(variables('nicCount'), 0)]]",
        "properties": {
          "primary": true
        }
      },
      {
        "id": "[variables('nicParamsPlusOne')[min(variables('nicCount'), 1)]]",
        "properties": {
          "primary": false
        }
      },
      {
        "id": "[variables('nicParamsPlusOne')[min(variables('nicCount'), 2)]]",
        "properties": {
          "primary": false
        }
      },
      {
        "id": "[variables('nicParamsPlusOne')[min(variables('nicCount'), 3)]]",
        "properties": {
          "primary": false
        }
      }
    ],
    "nicReferencesMapKey": "[string(greater(variables('nicCount'), 0))]",
    "nicReferencesMap": {
      "true": "[take(variables('nicReferenceArray'), variables('nicCount'))]",
      "false": [
        {
          "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkInterfaces', parameters('nic').name)]"
        }
      ]
    },

    "nicReferences": "[variables('nicReferencesMap')[variables('nicReferencesMapKey')]]",
    "vmBaseProperties": {
      "hardwareProfile": {
        "vmSize": "[parameters('vmSize')]"
      },
      "osProfile": "[variables('osProfileProperties')]",
      "networkProfile": {
        "networkInterfaces": "[variables('nicReferences')]"
      }
    },

    "vmProperties": "[union(variables('vmBaseProperties'), variables('availabilitySetFragment'), variables('imageReferenceFragment'))]",

    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', parameters('subnet').name)]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/','subnet')]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('nic').newOrExisting, 'new')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[parameters('nic').name]",
      "apiVersion": "2017-03-01",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1ToDo",
            "properties": {
              "privateIPAllocationMethod": "[parameters('privateIpAllocationMethod')]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[variables('vnetId')]"
      ]
    },
    {
      "condition": "[equals(parameters('subnet').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('subnet').name]",
      "apiVersion": "2017-03-01",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[array(parameters('subnet').addressPrefixes)]"
        },
        "subnets": [
          {
            "name": "subnet",
            "properties": {
              "addressPrefix": "[parameters('subnet').subnets.subnet.addressPrefix]"
            }
          }
        ]
      }
    },
    {
      "condition": "[variables('shouldCreateStorageAccount')]",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('unmanagedDiskStorageAccount').name]",
      "apiVersion": "2017-06-01",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('unmanagedDiskStorageAccount').type]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', parameters('unmanagedDiskStorageAccount').name)]",
        "[variables('nicReferences')[0].id]"
      ],
      "properties": "[variables('vmProperties')]",
      "tags": "[parameters('tags')]"
    }
  ],
  "outputs": {
    "virtualMachineInputPropertiesToDo": {
      "type": "object",
      "value": "[variables('vmProperties')]"
    },
    "virtualMachine": {
      "type": "object",
      "value": "[reference(parameters('name'))]"
    }
  }
}
